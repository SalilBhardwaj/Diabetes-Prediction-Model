# -*- coding: utf-8 -*-
"""diabetessss

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pyU57Iu9cNQkVxLhHCt4PPkcxtGaefTu
"""

from google.colab import drive
drive.mount("/content/drive")

pip install numpy pandas matplotlib seaborn scikit-learn

# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load Dataset
url = "/content/drive/MyDrive/csvfile.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
           'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, header=0, names=columns)

# Display first few rows
print("Dataset Preview:")
print(data.head())

from google.colab import drive
drive.mount('/content/drive')

print("\nData Info:")
print(data.info())

# Handling Missing Values (replace zeros in certain columns with NaN)
cols_with_zeros = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
for col in cols_with_zeros:
    data[col] = data[col].replace(0, np.nan)

# Now, fill NaN values with the median of each column
data[cols_with_zeros] = data[cols_with_zeros].apply(lambda x: x.fillna(x.median()))

# Double-check that missing values have been handled
print("\nData After Handling Missing Values:")
print(data.isnull().sum())

# Splitting the Dataset
X = data.drop(columns='Outcome', axis=1)
y = data['Outcome']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#ModelTraining
classifier = RandomForestClassifier(random_state=42, n_estimators=100)
classifier.fit(X_train, y_train)

# Predictions
y_pred = classifier.predict(X_test)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

new_sample = np.array([[2, 120, 80, 32, 0, 35.5, 0.627, 45]])  # Replace with actual values
new_sample = scaler.transform(new_sample)
prediction = classifier.predict(new_sample)
print("\nPrediction for the new sample:")
print("Diabetic" if prediction[0] == 1 else "Not Diabetic")